{"name":"DomoCharts","type":"virtual_device","properties":{"deviceIcon":4,"currentIcon":"4","log":"","logTemp":"","mainLoop":"","visible":"true","rows":[{"type":"button","elements":[{"id":1,"lua":true,"waitForResponse":false,"caption":"Sensors","name":"Button11","empty":false,"msg":"--------------------------------------------------\n-- Button  : 1 => Sensors : Temperature, Humidity, Light, ...\n-- Author  : Lazer\n-- Version : 5.0\n-- Date    : September 2015\n--------------------------------------------------\n\n-- User Global Variables\nlocal variables = {}\n\n-- System variables\nlocal debug = false\nlocal selfID = fibaro:getSelfId()\nlocal ip = fibaro:get(selfID, 'IPAddress')\nlocal port = fibaro:get(selfID, 'TCPPort')\nlocal NAS = Net.FHttp(ip, tonumber(port))\nlocal erreur = 0\nlocal sensors = {\n\t{\n\t\t[\"type\"] = \"temperature\",\n\t\t[3] = \"temperature_sensor\",\n\t\t[4] = \"com.fibaro.temperatureSensor\"\n\t},\n\t{\n\t\t[\"type\"] = \"humidity\",\n\t\t[3] = \"humidity_sensor\",\n\t\t[4] = \"com.fibaro.humiditySensor\"\n\t},\n\t{\n\t\t[\"type\"] = \"temperature\",\n\t\t[3] = \"thermostat_setpoint\",\n\t\t[4] = \"com.fibaro.setPoint\"\n\t},\n\t{\n\t\t[\"type\"] = \"temperature\",\n\t\t[3] = \"thermostat_setpoint\",\n\t\t[4] = \"com.fibaro.thermostatHorstmann\"\n\t},\n\t{\n\t\t[\"type\"] = \"light\",\n\t\t[3] = \"light_sensor\",\n\t\t[4] = \"com.fibaro.lightSensor\"\n\t}\n}\nlocal netatmo = {\n\t[\"CO2\"] = \"co2\",\n\t[\"Press\"] = \"pressure\",\n\t[\"Noise\"] = \"noise\",\n\t[\"Rain\"] = \"rain\"\n}\n\n-- Send data to NAS (SQL DB)\nfunction SendDataNAS (datas)\n\tif debug then\n\t\tfibaro:debug(json.encode(datas))\n\tend\n\tif #datas > 0 then\n\t\tlocal payload = \"/graph/data_post.php\"\n\t\tlocal response, status, errorCode = NAS:POST(payload, json.encode(datas))\n\t\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\t\t\tjsonTable = json.decode(response);\n\t\t\tif jsonTable.success ~= true then\n\t\t\t\terreur = erreur + 1\n\t\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Error '..(jsonTable.error and jsonTable.error.code or \"???\")..' : '..(jsonTable.error and jsonTable.error.message or \"???\")..'</span>')\n\t\t\telseif debug then\n\t\t\t\tfibaro:debug('<span style=\"display:inline;color:green;\">OK : '..(jsonTable.rowcount or \"???\")..' lines inserted in DB</span>')\n\t\t\tend\n\t\telse\n\t\t\terreur = erreur + 1\n\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Error : Can not connect to NAS, errorCode='..errorCode..', status='..status..', payload='..payload..', response='..(response or \"\")..'</span>')\n\t\tend\n\tend\nend\n\n-- Get HC2 software version\nlocal HC2 = Net.FHttp(\"127.0.0.1\", 11111)\npayload = \"/api/settings/info\"\nresponse, status, errorCode = HC2:GET(payload)\nif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\tjsonTable = json.decode(response)\n\tif tonumber(jsonTable.softVersion) >= 4 then\n\t\tversion = 4\n\telse\n\t\tversion = 3\n\tend\n\tif debug then\n\t\tfibaro:debug(\"v\"..version)\n\tend\n\n\t-- Get HC2 Device list\n\tfor i = 1, #sensors do\n\t\tpayload = \"/api/devices?type=\" .. sensors[i][version]\n\t\tresponse, status, errorCode = HC2:GET(payload)\n\t\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\n\t\t\t-- Get data\n\t\t\tlocal datas = {}\n\t\t\tjsonTable = json.decode(response)\n\t\t\tfor j = 1, #jsonTable do\n\t\t\t\t-- Exclude hidden, disabled, and dead devices\n\t\t\t\tif jsonTable[j].visible and jsonTable[j].visible == true and jsonTable[j].enabled and jsonTable[j].enabled == true and jsonTable[j].properties.dead and jsonTable[j].properties.dead == \"false\" then\n\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\tdatas[#datas].id = jsonTable[j].id\n\t\t\t\t\tdatas[#datas].timestamp = 'NULL'\n\t\t\t\t\tdatas[#datas].type = sensors[i].type\n\t\t\t\t\tdatas[#datas].value = jsonTable[j].properties.value\n\t\t\t\telseif debug then\n\t\t\t\t\tfibaro:debug(\"Device \"..jsonTable[j].id..\" \"..jsonTable[j].name..\" excluded\")\n\t\t\t\tend\n\t\t\tend\n\n\t\t\t-- Send data to NAS\n\t\t\tSendDataNAS(datas)\n\n\t\telse\n\t\t\terreur = erreur + 1\n\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\n\t\tend\n\tend\n\n\t-- Get HC2 Netatmo Plugin Device\n\tif version == 4 then\n\t\tpayload = \"/api/devices?type=com.fibaro.netatmoWeatherStation\"\n\t\tresponse, status, errorCode = HC2:GET(payload)\n\t\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\n\t\t\t-- Get data\n\t\t\tjsonTable = json.decode(response)\n\t\t\tif jsonTable[1] and jsonTable[1].properties and jsonTable[1].properties.childTable and jsonTable[1].properties.childTable ~= \"\" then\n\t\t\t\tlocal datas = {}\n\t\t\t\tlocal childTable = json.decode(jsonTable[1].properties.childTable)\n\t\t\t\tfor id, data in pairs(childTable) do\n\t\t\t\t\tlocal sensor = data:match(\"%.([^%.]+)\") -- Split string after dot\n\t\t\t\t\tfor k,v in pairs(netatmo) do\n\t\t\t\t\t\tif sensor == k then\n\t\t\t\t\t\t\t-- Get sensor\n\t\t\t\t\t\t\tlocal value = fibaro:getValue(id, \"value\")\n\t\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\t\tfibaro:debug(id..' '..fibaro:getName(id)..' : '..value)\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\t\tdatas[#datas].id = id\n\t\t\t\t\t\t\tdatas[#datas].timestamp = 'NULL'\n\t\t\t\t\t\t\tdatas[#datas].type = v\n\t\t\t\t\t\t\tdatas[#datas].value = value\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\t-- Send data to NAS\n\t\t\t\tSendDataNAS(datas)\n\n\t\t\telseif debug then\n\t\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">No Netatmo device found')\n\t\t\tend\n\n\t\telse\n\t\t\terreur = erreur + 1\n\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\n\t\tend\n\telseif debug then\n\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Netatmo plugin not supported')\n\tend\n\nelse\n\terreur = erreur + 1\n\tfibaro:debug('<span style=\"display:inline;color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\nend\n\n-- Get Meteo\nlocal datas = {}\ndatas[1] = {}\ndatas[1].id = 3\ndatas[1].timestamp = 'NULL'\ndatas[1].type = \"temperature\"\ndatas[1].value = fibaro:getValue(3, \"Temperature\")\ndatas[2] = {}\ndatas[2].id = 3\ndatas[2].timestamp = 'NULL'\ndatas[2].type = \"humidity\"\ndatas[2].value = fibaro:getValue(3, \"Humidity\")\ndatas[3] = {}\ndatas[3].id = 3\ndatas[3].timestamp = 'NULL'\ndatas[3].type = \"wind\"\ndatas[3].value = fibaro:getValue(3, \"Wind\")\n-- Send data to NAS\nSendDataNAS(datas)\n\n-- Get User Variable list (updated from FHEM through API)\ndatas = nil\nlocal datas = {}\nfor i = 1, #variables do\n\tpayload = \"/graph/data_post_\" .. variables[i].type .. \".php?id=\" .. variables[i].id .. \"&value=\" .. fibaro:getGlobalValue(variables[i].name)\n\tdatas[#datas+1] = {}\n\tdatas[#datas].id = variables[i].id\n\tdatas[#datas].timestamp = 'NULL'\n\tdatas[#datas].type = variables[i].type\n\tdatas[#datas].value = fibaro:getGlobalValue(variables[i].name)\nend\n-- Send data to NAS\nSendDataNAS(datas)\n\nif erreur > 0 then\n\tfibaro:log(\"Erreur\")\nelse\n\tfibaro:log(\"Sensors uploaded\")\nend\n","buttonIcon":4,"favourite":false,"main":false},{"id":2,"lua":true,"waitForResponse":false,"caption":"Power","name":"Button12","empty":false,"msg":"--------------------------------------------------\n-- Button  : 2 => Power\n-- Author  : Lazer\n-- Version : 5.0\n-- Date    : September 2015\n--------------------------------------------------\n\n-- System variables\nlocal debug = false\nlocal selfID = fibaro:getSelfId()\nlocal ip = fibaro:get(selfID, 'IPAddress')\nlocal port = fibaro:get(selfID, 'TCPPort')\nlocal NAS = Net.FHttp(ip, tonumber(port))\nlocal erreur = 0\n\n-- Send data to NAS (SQL DB)\nfunction SendDataNAS (datas)\n\tif debug then\n\t\tfibaro:debug(json.encode(datas))\n\tend\n\tif #datas > 0 then\n\t\tlocal payload = \"/graph/data_post.php\"\n\t\tlocal response, status, errorCode = NAS:POST(payload, json.encode(datas))\n\t\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\t\t\tjsonTable = json.decode(response);\n\t\t\tif jsonTable.success ~= true then\n\t\t\t\terreur = erreur + 1\n\t\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Error '..(jsonTable.error and jsonTable.error.code or \"???\")..' : '..(jsonTable.error and jsonTable.error.message or \"???\")..'</span>')\n\t\t\telseif debug then\n\t\t\t\tfibaro:debug('<span style=\"display:inline;color:green;\">OK : '..(jsonTable.rowcount or \"???\")..' lines inserted in DB</span>')\n\t\t\tend\n\t\telse\n\t\t\terreur = erreur + 1\n\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Error : Can not connect to NAS, errorCode='..errorCode..', status='..status..', payload='..payload..', response='..(response or \"\")..'</span>')\n\t\tend\n\tend\nend\n\n-- Get HC2 software version\nlocal HC2 = Net.FHttp(\"127.0.0.1\", 11111)\npayload = \"/api/settings/info\"\nresponse, status, errorCode = HC2:GET(payload)\nif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\tjsonTable = json.decode(response)\n\tif tonumber(jsonTable.softVersion) >= 4 then\n\t\tversion = 4\n\telse\n\t\tversion = 3\n\tend\n\tif debug then\n\t\tfibaro:debug(\"v\"..version)\n\tend\n\t-- Get HC2 Device list\n\tpayload = \"/api/devices\"\n\tresponse, status, errorCode = HC2:GET(payload)\n\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\n\t\t-- Get data\n\t\tlocal datas = {}\n\t\tjsonTable = json.decode(response)\n\t\tfor i = 1, #jsonTable do\n\t\t\tif version == 4 then\n\t\t\t\t-- Exclude hidden, disabled, and dead devices\n\t\t\t\tif jsonTable[i].interfaces and jsonTable[i].visible and jsonTable[i].visible == true and jsonTable[i].enabled and jsonTable[i].enabled == true and jsonTable[i].properties.dead and jsonTable[i].properties.dead == \"false\" then\n\t\t\t\t\t-- Look for devices returning power consumption\n\t\t\t\t\tfor j = 1, #jsonTable[i].interfaces do\n\t\t\t\t\t\tif jsonTable[i].interfaces[j] == \"power\" then\n\t\t\t\t\t\t\tlocal power = jsonTable[i].properties.power\n\t\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\t\tfibaro:debug(jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..power..\"W\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\t\t\tdatas[#datas].timestamp = 'NULL'\n\t\t\t\t\t\t\tdatas[#datas].type = \"power\"\n\t\t\t\t\t\t\tdatas[#datas].value = power\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telseif version == 3 then\n\t\t\t\t-- Look for devices returning power consumption\n\t\t\t\tif jsonTable[i].properties.unitSensor and jsonTable[i].properties.unitSensor == \"W\" then\n\t\t\t\t\tpower = jsonTable[i].properties.valueSensor\n\t\t\t\t\tif debug then\n\t\t\t\t\t\tfibaro:debug(jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..power..\"W\")\n\t\t\t\t\tend\n\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\tdatas[#datas].timestamp = 'NULL'\n\t\t\t\t\tdatas[#datas].type = \"power\"\n\t\t\t\t\tdatas[#datas].value = power\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\t-- Send data to NAS\n\t\tSendDataNAS(datas)\n\n\telse\n\t\terreur = erreur + 1\n\t\tfibaro:debug('<span style=\"display:inline;color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\n\tend\nelse\n\terreur = erreur + 1\n\tfibaro:debug('<span style=\"display:inline;color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\nend\n\nif erreur > 0 then\n\tfibaro:log(\"Erreur\")\nelse\n\tfibaro:log(\"Power uploaded\")\nend\n","buttonIcon":4,"favourite":false,"main":false},{"id":3,"lua":true,"waitForResponse":false,"caption":"Battery","name":"Button13","empty":false,"msg":"--------------------------------------------------\n-- Button  : 3 => Battery\n-- Author  : Lazer\n-- Version : 5.0\n-- Date    : September 2015\n--------------------------------------------------\n\n-- System variables\nlocal debug = true\nlocal selfID = fibaro:getSelfId()\nlocal ip = fibaro:get(selfID, 'IPAddress')\nlocal port = fibaro:get(selfID, 'TCPPort')\nlocal NAS = Net.FHttp(ip, tonumber(port))\nlocal erreur = 0\n\n-- Get HC2 software version\nlocal HC2 = Net.FHttp(\"127.0.0.1\", 11111)\npayload = \"/api/settings/info\"\nresponse, status, errorCode = HC2:GET(payload)\nif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\tjsonTable = json.decode(response)\n\tif tonumber(jsonTable.softVersion) >= 4 then\n\t\tversion = 4\n\telse\n\t\tversion = 3\n\tend\n\tif debug then\n\t\tfibaro:debug(\"v\"..version)\n\tend\n\t-- Get HC2 Device list\n\tpayload = \"/api/devices\"\n\tresponse, status, errorCode = HC2:GET(payload)\n\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\t\tlocal batteries = {}\n\t\tjsonTable = json.decode(response)\n\t\tfor i = 1, #jsonTable do\n\t\t\tif version == 4 then\n\t\t\t\t-- Keep only parent devices\n\t\t\t\t-- Notes : Z-Wave devices have parentId=1\n\t\t\t\t--         Plugins (like Netatmo or Krikroff's Virtual Sensor) have parentId=0\n\t\t\t\tif jsonTable[i].parentId and jsonTable[i].parentId == 1 then\n\t\t\t\t\t-- Look for battery operated devices\n\t\t\t\t\tif jsonTable[i].interfaces then\n\t\t\t\t\t\tfor j = 1, #jsonTable[i].interfaces do\n\t\t\t\t\t\t\tif jsonTable[i].interfaces[j] == \"battery\" then\n\t\t\t\t\t\t\t\tlocal batteryLevel = jsonTable[i].properties.batteryLevel\n\t\t\t\t\t\t\t\tif tonumber(batteryLevel) == 255 then batteryLevel = 0 end\n\t\t\t\t\t\t\t\tif tonumber(batteryLevel) > 100 then batteryLevel = 100 end\n\t\t\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\t\t\tfibaro:debug(jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..batteryLevel..\"%\")\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t-- Prepare JSON data\n\t\t\t\t\t\t\t\tbatteries[#batteries+1] = {}\n\t\t\t\t\t\t\t\tbatteries[#batteries].id = jsonTable[i].id\n\t\t\t\t\t\t\t\tbatteries[#batteries].date = os.date(\"%Y-%m-%d\")\n\t\t\t\t\t\t\t\tbatteries[#batteries].type = \"battery\"\n\t\t\t\t\t\t\t\tbatteries[#batteries].value = batteryLevel\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telseif version == 3 then\n\t\t\t\t-- Keep only parent devices\n\t\t\t\tif jsonTable[i].properties.parentID and jsonTable[i].properties.parentID == \"1\" then\n\t\t\t\t\t-- Look for battery operated devices\n\t\t\t\t\tif jsonTable[i].properties.isBatteryOperated and jsonTable[i].properties.isBatteryOperated == \"1\" then\n\t\t\t\t\t\tlocal batteryLevel = jsonTable[i].properties.batteryLevel\n\t\t\t\t\t\tif tonumber(batteryLevel) == 255 then batteryLevel = \"0\" end\n\t\t\t\t\t\tif tonumber(batteryLevel) > 100 then batteryLevel = \"100\" end\n\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\tfibaro:debug(jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..batteryLevel..\"%\")\n\t\t\t\t\t\tend\n\t\t\t\t\t\t-- Prepare JSON data\n\t\t\t\t\t\tbatteries[#batteries+1] = {}\n\t\t\t\t\t\tbatteries[#batteries].id = jsonTable[i].id\n\t\t\t\t\t\tbatteries[#batteries].date = os.date(\"%Y-%m-%d\")\n\t\t\t\t\t\tbatteries[#batteries].type = \"battery\"\n\t\t\t\t\t\tbatteries[#batteries].value = batteryLevel\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\t-- Send data to NAS (SQL DB)\n\t\tif debug then\n\t\t\tfibaro:debug(json.encode(batteries))\n\t\tend\n\t\tpayload = \"/graph/data_post.php\"\n\t\tresponse, status, errorCode = NAS:POST(payload, json.encode(batteries))\n\t\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\t\t\tjsonTable2 = json.decode(response);\n\t\t\tif jsonTable2.success == true then\n\t\t\t\tfibaro:debug('<span style=\"display:inline;color:green;\">OK : '..(jsonTable2.rowcount or \"???\")..' lines inserted in DB</span>')\n\t\t\telse\n\t\t\t\terreur = erreur + 1\n\t\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Error '..(jsonTable2.error and jsonTable2.error.code or \"???\")..' : '..(jsonTable2.error and jsonTable2.error.message or \"???\")..'</span>')\n\t\t\tend\n\t\telse\n\t\t\terreur = erreur + 1\n\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Error : Can not connect to NAS, errorCode='..errorCode..', status='..status..', payload='..payload..', response='..(response or \"\")..'</span>')\n\t\tend\n\n\telse\n\t\terreur = erreur + 1\n\t\tfibaro:debug('<span style=\"display:inline;color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\n\tend\nelse\n\terreur = erreur + 1\n\tfibaro:debug('<span style=\"display:inline;color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\nend\n\nif erreur > 0 then\n\tfibaro:log(\"Erreur\")\nelse\n\tfibaro:log(\"Batteries uploaded\")\nend\n","buttonIcon":4,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":4,"lua":true,"waitForResponse":false,"caption":"Devices","name":"Button21","empty":false,"msg":"--------------------------------------------------\n-- Button  : 4 => Devices\n-- Author  : Lazer\n-- Version : 5.0\n-- Date    : September 2015\n--------------------------------------------------\n\n-- User Global Variables\nlocal variables = {}\n\n-- System variables\nlocal debug = true\nlocal selfID = fibaro:getSelfId()\nlocal ip = fibaro:get(selfID, 'IPAddress')\nlocal port = fibaro:get(selfID, 'TCPPort')\nlocal NAS = Net.FHttp(ip, tonumber(port))\nlocal erreur = 0\nlocal datas = {}\nlocal sensors = {\n\t{\n\t\t[\"type\"] = \"temperature\",\n\t\t[3] = \"temperature_sensor\",\n\t\t[4] = \"com.fibaro.temperatureSensor\"\n\t},\n\t{\n\t\t[\"type\"] = \"humidity\",\n\t\t[3] = \"humidity_sensor\",\n\t\t[4] = \"com.fibaro.humiditySensor\"\n\t},\n\t{\n\t\t[\"type\"] = \"temperature\",\n\t\t[3] = \"thermostat_setpoint\",\n\t\t[4] = \"com.fibaro.setPoint\"\n\t},\n\t{\n\t\t[\"type\"] = \"temperature\",\n\t\t[3] = \"thermostat_setpoint\",\n\t\t[4] = \"com.fibaro.thermostatHorstmann\"\n\t},\n\t{\n\t\t[\"type\"] = \"light\",\n\t\t[3] = \"light_sensor\",\n\t\t[4] = \"com.fibaro.lightSensor\"\n\t}\n}\nlocal netatmo = {\n\t[\"CO2\"] = \"co2\",\n\t[\"Press\"] = \"pressure\",\n\t[\"Noise\"] = \"noise\",\n\t[\"Rain\"] = \"rain\"\n}\n\n-- Get HC2 software version\nlocal HC2 = Net.FHttp(\"127.0.0.1\", 11111)\npayload = \"/api/settings/info\"\nresponse, status, errorCode = HC2:GET(payload)\nif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\tjsonTable = json.decode(response)\n\tif tonumber(jsonTable.softVersion) >= 4 then\n\t\tversion = 4\n\telse\n\t\tversion = 3\n\tend\n\tif debug then\n\t\tfibaro:debug(\"v\"..version)\n\tend\n\n\t-- Get HC2 Device list\n\tpayload = \"/api/devices\"\n\tresponse, status, errorCode = HC2:GET(payload)\n\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\t\t-- Get data\n\t\tjsonTable = json.decode(response)\n\t\tfor i = 1, #jsonTable do\n\t\t\tif version == 4 then\n\t\t\t\tif jsonTable[i].interfaces then\n\t\t\t\t\tfor j = 1, #jsonTable[i].interfaces do\n\t\t\t\t\t\t-- Look for devices returning power consumption\n\t\t\t\t\t\tif jsonTable[i].interfaces[j] == \"power\" then\n\t\t\t\t\t\t\tlocal deviceName = jsonTable[i].name\n\t\t\t\t\t\t\tlocal roomID = jsonTable[i].roomID\n\t\t\t\t\t\t\tlocal roomName = fibaro:getRoomNameByDeviceID(jsonTable[i].id)\n\t\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\t\tfibaro:debug(i..\" \"..jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..roomName)\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\t\t\tdatas[#datas].type = 'power'\n\t\t\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\t\t\tdatas[#datas].type = 'energy'\n\t\t\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\t\t\tend\n\t\t\t\t\t\t-- Look for battery operated devices\n\t\t\t\t\t\tif jsonTable[i].interfaces[j] == \"battery\" then\n\t\t\t\t\t\t\t-- Keep only parent devices\n\t\t\t\t\t\t\tif jsonTable[i].parentId and jsonTable[i].parentId == 1 then\n\t\t\t\t\t\t\t\tlocal deviceName = jsonTable[i].name\n\t\t\t\t\t\t\t\tlocal roomID = jsonTable[i].roomID\n\t\t\t\t\t\t\t\tlocal roomName = fibaro:getRoomNameByDeviceID(jsonTable[i].id)\n\t\t\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\t\t\tfibaro:debug(i..\" \"..jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..roomName)\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\t\t\t\tdatas[#datas].type = 'battery'\n\t\t\t\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t-- Look for sensors devices returning environmental values\n\t\t\t\tfor j = 1, #sensors do\n\t\t\t\t\tif jsonTable[i].type == sensors[j][version] then\n\t\t\t\t\t\tlocal deviceName = jsonTable[i].name\n\t\t\t\t\t\tlocal roomID = jsonTable[i].roomID\n\t\t\t\t\t\tlocal roomName = fibaro:getRoomNameByDeviceID(jsonTable[i].id)\n\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\tfibaro:debug(i..\" \"..jsonTable[i].id..\" \"..deviceName..\" \"..roomName)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\t\tdatas[#datas].type = sensors[j].type\n\t\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telseif version == 3 then\n\t\t\t\t-- Look for devices returning power consumption\n\t\t\t\tif jsonTable[i].properties.unitSensor and jsonTable[i].properties.unitSensor == \"W\" then\n\t\t\t\t\tlocal deviceName = jsonTable[i].name\n\t\t\t\t\tlocal roomID = jsonTable[i].roomID\n\t\t\t\t\tlocal roomName = fibaro:getRoomNameByDeviceID(jsonTable[i].id)\n\t\t\t\t\tif debug then\n\t\t\t\t\t\tfibaro:debug(i..\" \"..jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..roomName)\n\t\t\t\t\tend\n\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\tdatas[#datas].type = 'power'\n\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\tdatas[#datas].type = 'energy'\n\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\tend\n\t\t\t\t-- Look for battery operated devices\n\t\t\t\tif jsonTable[i].properties.isBatteryOperated and jsonTable[i].properties.isBatteryOperated == \"1\" then\n\t\t\t\t\t-- Keep only parent devices\n\t\t\t\t\tif jsonTable[i].properties.parentID and jsonTable[i].properties.parentID == \"1\" then\n\t\t\t\t\t\tlocal deviceName = jsonTable[i].name\n\t\t\t\t\t\tlocal roomID = jsonTable[i].roomID\n\t\t\t\t\t\tlocal roomName = fibaro:getRoomNameByDeviceID(jsonTable[i].id)\n\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\tfibaro:debug(i..\" \"..jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..roomName)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\t\tdatas[#datas].type = 'battery'\n\t\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t-- Look for sensors devices returning environmental values\n\t\t\t\tfor j = 1, #sensors do\n\t\t\t\t\tif jsonTable[i].type == sensors[j][version] then\n\t\t\t\t\t\tlocal deviceName = jsonTable[i].name\n\t\t\t\t\t\tlocal roomID = jsonTable[i].roomID\n\t\t\t\t\t\tlocal roomName = fibaro:getRoomNameByDeviceID(jsonTable[i].id)\n\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\tfibaro:debug(i..\" \"..jsonTable[i].id..\" \"..jsonTable[i].name..\" \"..roomName)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\tdatas[#datas].id = jsonTable[i].id\n\t\t\t\t\t\tdatas[#datas].type = sensors[j].type\n\t\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\telse\n\t\terreur = erreur + 1\n\t\tfibaro:debug('<span style=\"color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\n\tend\n\n\t-- Get HC2 Netatmo Weather Station plugin device\n\tif version == 4 then\n\t\tpayload = \"/api/devices?type=com.fibaro.netatmoWeatherStation\"\n\t\tresponse, status, errorCode = HC2:GET(payload)\n\t\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\t\t\t-- Get data\n\t\t\tjsonTable = json.decode(response)\n\t\t\tif jsonTable[1] and jsonTable[1].properties and jsonTable[1].properties.childTable and jsonTable[1].properties.childTable ~= \"\" then\n\t\t\t\tlocal childTable = json.decode(jsonTable[1].properties.childTable)\n\t\t\t\tfor id, data in pairs(childTable) do\n\t\t\t\t\tlocal sensor = data:match(\"%.([^%.]+)\") -- Split string after dot\n\t\t\t\t\tfor k,v in pairs(netatmo) do\n\t\t\t\t\t\tif sensor == k then\n\t\t\t\t\t\t\tlocal deviceName = fibaro:getName(id)\n\t\t\t\t\t\t\tlocal roomID = fibaro:getRoomID(id)\n\t\t\t\t\t\t\tlocal roomName = fibaro:getRoomNameByDeviceID(id)\n\t\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\t\tfibaro:debug(id..\" \"..deviceName..\" \"..roomName)\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdatas[#datas+1] = {}\n\t\t\t\t\t\t\tdatas[#datas].id = id\n\t\t\t\t\t\t\tdatas[#datas].type = v\n\t\t\t\t\t\t\tdatas[#datas].name = deviceName\n\t\t\t\t\t\t\tdatas[#datas].roomid = roomID\n\t\t\t\t\t\t\tdatas[#datas].roomname = roomName\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telseif debug then\n\t\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">No Netatmo device found')\n\t\t\tend\n\t\telse\n\t\t\terreur = erreur + 1\n\t\t\tfibaro:debug('<span style=\"display:inline;color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\n\t\tend\n\telseif debug then\n\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Netatmo plugin not supported')\n\tend\n\nelse\n\terreur = erreur + 1\n\tfibaro:debug('<span style=\"color:red;\">status='..status..', errorCode='..errorCode..', payload='..payload..', response='..(response or \"\")..'</span>')\nend\n\n-- Get Weather devices\n--local deviceName = fibaro:getName(3)\nlocal deviceName = 'Météo'\nif debug then\n\tfibaro:debug(\"1 3 \"..deviceName)\nend\ndatas[#datas+1] = {}\ndatas[#datas].id = 3\ndatas[#datas].type = 'temperature'\ndatas[#datas].name = deviceName\ndatas[#datas].roomid = 0\ndatas[#datas].roomname = ''\nif debug then\n\tfibaro:debug(\"2 3 \"..deviceName)\nend\ndatas[#datas+1] = {}\ndatas[#datas].id = 3\ndatas[#datas].type = 'humidity'\ndatas[#datas].name = deviceName\ndatas[#datas].roomid = 0\ndatas[#datas].roomname = ''\nif debug then\n\tfibaro:debug(\"3 3 \"..deviceName)\nend\ndatas[#datas+1] = {}\ndatas[#datas].id = 3\ndatas[#datas].type = 'wind'\ndatas[#datas].name = deviceName\ndatas[#datas].roomid = 0\ndatas[#datas].roomname = ''\n\n-- Get User Variable list (From FHEM)\nfor i = 1, #variables do\n\tlocal roomName = fibaro:getRoomName(variables[i].room)\n\tif debug then\n\t\tfibaro:debug(i..\" \"..variables[i].id..\" \"..variables[i].name..\" \"..roomName)\n\tend\n\tdatas[#datas+1] = {}\n\tdatas[#datas].id = variables[i].id\n\tdatas[#datas].type = variables[i].type\n\tdatas[#datas].name = variables[i].name\n\tdatas[#datas].roomid = variables[i].room\n\tdatas[#datas].roomname = roomName\nend\n\n-- Send data to NAS (SQL DB)\nif debug then\n\tfibaro:debug(json.encode(datas))\nend\npayload = \"/graph/device_post.php\"\nresponse, status, errorCode = NAS:POST(payload, json.encode(datas))\nif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\tjsonTable2 = json.decode(response)\n\tif jsonTable2.success == true then\n\t\tfibaro:debug('<span style=\"display:inline;color:green;\">OK : '..(jsonTable2.rowcount or \"???\")..' lines inserted in DB</span>')\n\telse\n\t\terreur = erreur + 1\n\t\tfibaro:debug('<span style=\"display:inline;color:red;\">Error '..(jsonTable2.error and jsonTable2.error.code or \"???\")..' : '..(jsonTable2.error and jsonTable2.error.message or \"???\")..'</span>')\n\tend\nelse\n\terreur = erreur + 1\n\tfibaro:debug('<span style=\"display:inline;color:red;\">Error : Can not connect to NAS, errorCode='..errorCode..', status='..status..', payload='..payload..', response='..(response or \"\")..'</span>')\nend\n\nif erreur > 0 then\n\tfibaro:log(\"Erreur\")\nelse\n\tfibaro:log(\"Devices uploaded\")\nend\n","buttonIcon":4,"favourite":false,"main":true}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"Trend","name":"Button31","empty":false,"msg":"local selfID = fibaro:getSelfId()\nlocal ip = fibaro:get(selfID, 'IPAddress')\nlocal port = fibaro:get(selfID, 'TCPPort')\nlocal NAS = Net.FHttp(ip, tonumber(port))\nlocal payload = \"/graph/generate_trend.php\"\nresponse, status, errorCode = NAS:GET(payload)\n\nif tonumber(errorCode) == 0 and tonumber(status) == 200 then\n\tfibaro:log('Trends generated')\nelse\n\tfibaro:debug('<span style=\"display:inline;color:red;\">Error : Can not connect to NAS, errorCode='..errorCode..', status='..status..', payload='..payload..', response='..(response or \"\")..'</span>')\nend\n","buttonIcon":4,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"Energy","name":"Button41","empty":false,"msg":"--------------------------------------------------\n-- Button  : 6 => Energy (HC2)\n-- Author  : Lazer\n-- Version : 5.0\n-- Date    : September 2015\n--------------------------------------------------\n\n-- System variables\nlocal debug = false\nlocal selfID = fibaro:getSelfId()\nlocal ip = fibaro:get(selfID, 'IPAddress')\nlocal port = fibaro:get(selfID, 'TCPPort')\nlocal NAS = Net.FHttp(ip, tonumber(port))\nlocal erreur = 0\nlocal devices = {}\n\n-- Get HC2 Device list\nlocal HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nresponse, status, errorCode = HC2:GET(\"/api/devices\")\nif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\tjsonTable = json.decode(response)\n\tfor i, device in pairs(jsonTable) do\n\t\tif device.visible and device.visible == true and device.enabled and device.enabled == true and device.properties.dead and device.properties.dead == \"false\" then\n\t\t\tif device.properties.showEnergy then\n\t\t\t\tif debug then\n\t\t\t\t\tfibaro:debug(\"device => \"..device.id..\" \"..device.name..\" \"..device.properties.power..\"W\")\n\t\t\t\tend\n\t\t\t\ttable.insert(devices, device.id)\n\t\t\tend\n\t\tend\n\tend\nelse\n\terreur = erreur + 1\n\tfibaro:debug('<span style=\"color:red;\">Error : Can not connect to HC2, errorCode='..errorCode..', status='..status..', response='..(response or \"\")..'</span>')\nend\nlocal device = table.concat(devices, ',')\nif debug then\n\tfibaro:debug(device)\nend\n\n-- Get teleinfo data from NAS (SQL DB)\nlocal payload = \"/graph/teleinfo_energy_get.php\"\nresponse, status, errorCode = NAS:GET(payload)\nif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\tif debug then\n\t\tfibaro:debug(response)\n\tend\n\tjsonTable = json.decode(response)\n\tif jsonTable.success and jsonTable.success == true then\n\t\tif jsonTable.data then\n\t\t\tfor jour, data in pairs(jsonTable.data) do -- using pairs() the order that items are returned is not defined, not even for indexed tables\n\t\t\t\tfibaro:debug(jour)\n\t\t\t\t-- On construit un tableau contenant le timestamp de début et de fin pour chaque plage horaire de tarification\n\t\t\t\tlocal timestamps = {}\n\t\t\t\tlocal j = 0\n\t\t\t\tfor i = 1, #data do\n\t\t\t\t\tif debug then\n\t\t\t\t\t\tfibaro:debug(\"data => \"..i..' - '..data[i][1]..' : '..data[i][2])\n\t\t\t\t\tend\n\t\t\t\t\ttimestamps[i] = {}\n\t\t\t\t\ttimestamps[i][0] = data[i][2] -- tarif\n\t\t\t\t\ttimestamps[i][1] = data[i][1] -- timestamp start\n\t\t\t\t\tif i > 1 then\n\t\t\t\t\t\ttimestamps[i-1][2] = data[i][1] -- timestamp end\n\t\t\t\t\tend\n\t\t\t\t\tj = i\n\t\t\t\tend\n\t\t\t\ttimestamps[j][2] = os.time({year=os.date(\"%Y\", timestamps[1][1]), month=os.date(\"%m\", timestamps[1][1]), day=os.date(\"%d\", timestamps[1][1])+1, hour=os.date(\"%H\", timestamps[1][1]), min=os.date(\"%M\", timestamps[1][1]), sec=os.date(\"%S\", timestamps[1][1])}) -- timestamp end of day\n\n\t\t\t\t-- Get energy consumption for every devices in HC2\n\t\t\t\tlocal energy = {}\n\t\t\t\tfor i = 1, #timestamps do\n\t\t\t\t\tif debug then\n\t\t\t\t\t\tfibaro:debug(\"timestamps => i = \"..i..\" - \"..timestamps[i][0]..\" - \"..timestamps[i][1]..\" \"..timestamps[i][2])\n\t\t\t\t\tend\n\t\t\t\t\tpayload = '/api/energy/'..timestamps[i][1]..'/'..timestamps[i][2]..'/compare/devices/power/'..device;\n\t\t\t\t\t--fibaro:debug(payload)\n\t\t\t\t\tresponse, status, errorCode = HC2:GET(payload)\n\t\t\t\t\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\t\t\t\t\t\t--fibaro:debug(response)\n\t\t\t\t\t\tjsonTable2 = json.decode(response)\n\t\t\t\t\t\t--table.sort(jsonTable2, function(a,b) return a.id<b.id end) -- Sort results by id, because HC2 API seems to sort results by consumption\n\t\t\t\t\t\tfor j = 1, #jsonTable2 do\n\t\t\t\t\t\t\tif not energy[jsonTable2[j].id] then\n\t\t\t\t\t\t\t\tenergy[jsonTable2[j].id] = {}\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\t\tfibaro:debug(jsonTable2[j].id..\" \"..jsonTable2[j].kWh)\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tenergy[jsonTable2[j].id][timestamps[i][0]] = (energy[jsonTable2[j].id][timestamps[i][0]] or 0) + jsonTable2[j].kWh\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\terreur = erreur + 1\n\t\t\t\t\t\tfibaro:debug('<span style=\"color:red;\">Error : Can not connect to HC2, errorCode='..errorCode..', status='..status..', payload='..payload..', response='..(response or \"\")..'</span>')\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\t-- Prepare JSON data\n\t\t\t\tlocal energies = {}\n\t\t\t\tfor id, toto in pairs(energy) do\n\t\t\t\t\tenergies[#energies+1] = {}\n\t\t\t\t\tenergies[#energies].id = id\n\t\t\t\t\tenergies[#energies].date = jour\n\t\t\t\t\tenergies[#energies].type = \"energy\"\n\t\t\t\t\tfor tarif, kwh in pairs(toto) do\n\t\t\t\t\t\tif debug then\n\t\t\t\t\t\t\tfibaro:debug(\"energy => id = \"..id..\" - tarif = \"..tarif..\" - kwh = \"..kwh)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tenergies[#energies][\"value_\"..tarif] = kwh\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\ttable.sort(energies, function(a,b) return a.id<b.id end) -- Sort results by id\n\t\t\t\tif debug then\n\t\t\t\t\tfibaro:debug(json.encode(energies))\n\t\t\t\tend\n\n\t\t\t\t-- Send energy data to NAS (SQL DB)\n\t\t\t\tpayload = \"/graph/data_post.php\"\n\t\t\t\tresponse, status, errorCode = NAS:POST(payload, json.encode(energies))\n\t\t\t\tif tonumber(errorCode) == 0 and tonumber(status) == 200 and response ~= nil and response ~= \"\" then\n\t\t\t\t\tjsonTable2 = json.decode(response);\n\t\t\t\t\tif jsonTable2.success == true then\n\t\t\t\t\t\tfibaro:debug('<span style=\"color:green;\">OK : '..(jsonTable2.rowcount or \"???\")..' lines inserted in DB</span>')\n\t\t\t\t\telse\n\t\t\t\t\t\terreur = erreur + 1\n\t\t\t\t\t\tfibaro:debug('<span style=\"color:red;\">Error '..(jsonTable2.error and jsonTable2.error.code or \"???\")..' : '..(jsonTable2.error and jsonTable2.error.message or \"???\")..'</span>')\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\terreur = erreur + 1\n\t\t\t\t\tfibaro:debug('<span style=\"color:red;\">Error : Can not connect to NAS, errorCode='..errorCode..', status='..status..', payload='..payload..', response='..(response or \"\")..'</span>')\n\t\t\t\tend\n\n\t\t\tend\n\t\telse\n\t\t\terreur = erreur + 1\n\t\t\tfibaro:debug('<span style=\"color:red;\">Error : Missing data from NAS : '..payload..'</span>')\n\t\tend\n\telse\n\t\terreur = erreur + 1\n\t\tfibaro:debug('<span style=\"color:red;\">Error '..(jsonTable.error and jsonTable.error.code or \"???\")..' : '..(jsonTable.error and jsonTable.error.message or \"???\")..'</span>')\n\tend\nelse\n\terreur = erreur + 1\n\tfibaro:debug('<span style=\"color:red;\">Error : Can not connect to NAS, errorCode='..errorCode..', status='..status..', payload='..payload..', response='..(response or \"\")..'</span>')\nend\n\nif erreur > 0 then\n\tfibaro:log(\"Erreur\")\nelse\n\tfibaro:log(\"Consumption uploaded\")\nend\n","buttonIcon":4,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}